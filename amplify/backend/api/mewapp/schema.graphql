type FileRequest
    @model
    @auth(
        rules: [
            { allow: groups, groups: ["Admin"] }
            # The public is only allowed to read posts
            { allow: public, operations: [read] }
        ]
    ) {
    id: ID!
    expiration: AWSDateTime!
    title: String
    details: String
    required: Boolean
    submissions: [FileRequestSubmission] @connection(keyName: "submissionsByFileRequestId", fields: ["id"])
}


type FileRequestSubmission
    @key(name: "submissionsByFileRequestId", fields: ["fileRequestId"], queryField: "submissionsByFileRequestId")
    @key(name: "submissionsByEmail", fields: ["email"], queryField: "submissionsByEmail")
    @model 
    @auth(
        rules: [
            { allow: owner }
            { allow: groups, groups: ["Admin"] }
            { allow: public, operations: [create, read] }
        ]
    ) {
        id: ID!
        fileRequestId: ID!
        fileRequest: FileRequest @connection(fields: ["fileRequestId"])
        artist: String
        name: String
        email: String
}



type Member
    @model
    @key(fields: ["email"])
    @auth(
        rules: [
            { allow: owner }
            { allow: groups, groups: ["Admin"] }
            { allow: public, operations: [create] }
        ]
    )
{
    email: String!
    artist: String
    submissions: [FileRequestSubmission] @connection(keyName: "submissionsByEmail", fields: ["email"])
    status: String

}
type Mutation {
      downloadSubmissions(assignmentId: ID!): String @function(name: "downloadAllSubmissions-${env}")
      populateMembers: [String] @function(name: "populateMembers-${env}")
}  