type Credit {
    id: ID!
    title: String
    artist: String
    artistLinks: [String]
}

type Artwork {
    id: ID!
    credit: [Credit]
}

type FileRequest
    @model
    @auth(
        rules: [
            { allow: groups, groups: ["Admin"] }
            # The public is only allowed to read posts
            { allow: public, operations: [read] }
        ]
    ) {
    id: ID!
    expiration: AWSDateTime!
    title: String
    details: String
    required: Boolean
    playlistArtwork: Artwork
    submissions: [FileRequestSubmission] @connection(keyName: "submissionsByFileRequestId", fields: ["id"])
}

type FileRequestSubmission
    @key(name: "submissionsByFileRequestId", fields: ["fileRequestId"], queryField: "submissionsByFileRequestId")
    @key(name: "submissionsByEmail", fields: ["email"], queryField: "submissionsByEmail")
    @model
    @auth(
        rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }, { allow: public, operations: [create, read] }]
    ) {
    id: ID!
    fileRequestId: ID!
    fileRequest: FileRequest @connection(fields: ["fileRequestId"])
    artist: String
    name: String
    email: String
    fileId: String
    fileExtension: String
    rating: Int
}

type Member
    @model
    @key(fields: ["email"])
    @auth(rules: [{ allow: owner }, { allow: groups, groups: ["Admin"] }, { allow: public, operations: [create] }]) {
    email: String!
    artist: String
    submissions: [FileRequestSubmission] @connection(keyName: "submissionsByEmail", fields: ["email"])
    status: String
}

input SongData {
    fileId: String
    title: String
}

type Mutation {
    processDownload(assignmentId: ID!, songData: [SongData]): String @function(name: "zipmewsubmissions-${env}")
    populateMembers: [String] @function(name: "populateMembers-${env}")
}
