type Artwork {
  id: ID!
  path: String!
  credit: String
}

type MailchimpIntegration {
  enabled: Boolean
  apiKeyName: String
  listId: String
  serverPrefix: String
}

type Features {
  mailchimp: MailchimpIntegration
}

type APIKey
  @model
  @auth(
    rules: [
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      {
        allow: groups
        groups: ["admin", "editor"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  keyName: String!
  createdAt: AWSDateTime
  profileID: ID!
  email: String! @index(name: "apiKeysByEmail")
  profile: Profile @belongsTo(fields: ["email"])
}

type Extension
  @model
  @auth(
    rules: [
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      {
        allow: groups
        groups: ["admin", "editor"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  expiration: AWSDateTime!
  assignmentId: ID!
    @index(
      name: "extensionsByFileRequestId"
      queryField: "extensionsByFileRequestId"
    )
}

type FileRequest
  @model
  @auth(
    rules: [
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      {
        allow: groups
        groups: ["admin", "editor"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  expiration: AWSDateTime!
  title: String
  details: String
  required: Boolean
  artwork: Artwork
  submissions: [FileRequestSubmission]
    @hasMany(indexName: "submissionsByFileRequestId", fields: ["id"])
  workshop: Workshop @belongsTo(fields: ["workshopId"])
  workshopId: ID
    @index(
      name: "fileRequestsByWorkshopId"
      queryField: "fileRequestsByWorkshopId"
    )
    @default(value: "c9443826-b0c3-4def-91d1-503ce4a27c7d")
  extensions: [Extension]
    @hasMany(indexName: "extensionsByFileRequestId", fields: ["id"])
  playlist: Playlist @hasOne
}

type FileRequestSubmission
  @model
  @auth(
    rules: [
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      # { allow: groups, groups: ["admin", "editor"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  fileRequestId: ID!
    @index(
      name: "submissionsByFileRequestId"
      queryField: "submissionsByFileRequestId"
    )
  fileRequest: FileRequest @belongsTo(fields: ["fileRequestId"])
  artist: String
  name: String
  email: String
    @index(name: "submissionsByEmail", queryField: "submissionsByEmail")
  profile: Profile @belongsTo(fields: ["email"])
  fileId: String
  fileExtension: String
  rating: Int
  comments: [Comment] @hasMany(indexName: "bySubmission", fields: ["id"])
  stems: [Stem] @manyToMany(relationName: "SubmissionStems")
  artwork: Artwork
  lyrics: String
  requestFeedback: Boolean
  duration: Int
  workshopId: ID
    @index(
      name: "submissionsByWorkshopId"
      queryField: "submissionsByWorkshopId"
    )
    @default(value: "c9443826-b0c3-4def-91d1-503ce4a27c7d")
}

type Track
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      # { allow: groups, groups: ["admin", "editor"], operations: [read, create, update, delete] }
    ]
  ) {
  order: Int!
  submission: FileRequestSubmission @hasOne
  playlist: Playlist @belongsTo
}

type Playlist
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      # { allow: groups, groups: ["admin", "editor"], operations: [read, create, update, delete] }
    ]
  ) {
  tracks: [Track] @hasMany
  owner: Profile @hasOne
  public: Boolean
  title: String
  artwork: Artwork
  type: String
    @index(
      name: "playlistsByDate"
      queryField: "playlistsByDate"
      sortKeyFields: ["createdAt"]
    )
  createdAt: String
}

type MailchimpTag {
  id: Int!
  name: String
}

type MailchimpUserInfo {
  id: String
  emailAddress: String
  status: String
  fullName: String
  uniqueEmailId: String
  contactId: String
  tags: [MailchimpTag]
}

type Link {
  id: ID
  text: String
  url: String
}

type Membership
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      {
        allow: groups
        groups: ["admin", "editor"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  workshopId: ID!
    @index(
      name: "membershipsByWorkshopId"
      queryField: "membershipsByWorkshopId"
    )
  email: String!
    @index(name: "membershipsByEmail", queryField: "membershipsByEmail")
  status: String
  workshop: Workshop @belongsTo(fields: ["workshopId"])
  profile: Profile @belongsTo(fields: ["email"])
  mailchimp: MailchimpUserInfo
  submissions: [FileRequestSubmission]
    @hasMany(indexName: "submissionsByEmail", fields: ["email"])
}

type Workshop
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      {
        allow: groups
        groups: ["admin", "editor"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String
  email: String @index(name: "workshopsByEmail")
  fileRequests: [FileRequest]
    @hasMany(indexName: "fileRequestsByWorkshopId", fields: ["id"])
  submissions: [FileRequestSubmission]
    @hasMany(indexName: "submissionsByWorkshopId", fields: ["id"])
  status: String
  passes: Int
  features: Features
  description: String
  artwork: Artwork
  host: Profile @belongsTo(fields: ["email"])

  startDate: AWSDateTime
  endDate: AWSDateTime
  memberships: [Membership]
    @hasMany(indexName: "membershipsByWorkshopId", fields: ["id"])
}

type Profile
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      {
        allow: groups
        groups: ["admin", "editor"]
        operations: [read, create, update, delete]
      }
    ]
  )
  @aws_cognito_user_pools {
  email: String! @primaryKey
  id: ID! @index(name: "byProfileId", queryField: "profileByProfileId")
  name: String
  displayName: String
  links: [Link]
  avatar: String
  bio: String
  sub: String
  apiKeys: [APIKey] @hasMany(indexName: "apiKeysByEmail", fields: ["email"])
  workshops: [Workshop]
    @hasMany(indexName: "workshopsByEmail", fields: ["email"])
  submissions: [FileRequestSubmission]
    @hasMany(indexName: "submissionsByEmail", fields: ["email"])
  memberships: [Membership]
    @hasMany(indexName: "membershipsByEmail", fields: ["email"])
  features: Features
  playlists: [Playlist] @hasMany
  uploadedStems: [Stem] @hasMany(indexName: "stemsByEmail", fields: ["email"])
  # downloadedStems: [Stem] @manyToMany(relationName: "SavedStems")
}

type Comment
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      # { allow: groups, groups: ["admin", "editor"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  content: String
  email: String!
  profile: Profile @hasOne(fields: ["email"])
  submissionId: ID @index(name: "bySubmission", sortKeyFields: ["content"])
  submission: FileRequestSubmission @belongsTo(fields: ["submissionId"])
  assignmentId: ID
  assignment: FileRequest @hasOne(fields: ["assignmentId"])
  workshopId: ID
  workshop: Workshop @hasOne(fields: ["workshopId"])
  parentId: ID
  type: String
    @index(
      name: "commentsByDate"
      queryField: "commentsByDate"
      sortKeyFields: ["createdAt"]
    )
  createdAt: String
}

type Stem
  @model
  @auth(
    rules: [
      { allow: private, provider: iam }
      { allow: private, operations: [read, create, update, delete] }
      { allow: public, operations: [create, read, update, delete] } # todo turn off public access once transition to auth-only complete
      # { allow: groups, groups: ["admin", "editor"], operations: [read, create, update, delete] }
    ]
  ) {
  id: ID!
  title: String
  bpm: Int
  key: String
  scale: String
  instruments: [String]
  notes: String
  submissions: [FileRequestSubmission]
    @manyToMany(relationName: "SubmissionStems")
  fileSize: Int
  fileExtension: String
  creatorEmail: String @index(name: "stemsByEmail")
  creator: Profile @belongsTo(fields: ["creatorEmail"])
  stemGroupId: ID
  filePath: String
  artist: String
  type: String
    @index(
      name: "stemsByDate"
      queryField: "stemsByDate"
      sortKeyFields: ["createdAt"]
    )
  createdAt: String
  # downloadedBy: [Profile] @manyToMany(relationName: "SavedStems")
}

input SongData {
  fileId: String
  title: String
}

input DownloadLinkOptions {
  stripMetadataForSoundCloud: Boolean
}

input ApiKeyUpdate {
  action: String!
  keyName: String!
  key: String
  keyId: String
}

type Response {
  statusCode: Int
  body: String
}

input MailchimpTagInput {
  id: Int!
  name: String
}

input MembershipServicePayload {
  emailAddress: String
  groupName: String
  fullName: String
  status: String
  mailchimpStatus: String
  contactId: String
  mailchimpId: String
  mailchimpTags: [MailchimpTagInput]
  uniqueEmailId: String
  mailchimpOauthCode: String
  mailchimpClientId: String
  mailchimpOauthCallback: String
  mailchimpApiKeyId: String
}

type Mutation {
  processDownload(assignmentId: ID!, songData: [SongData]): String
    @function(name: "zipmewsubmissions-${env}")

  updateProfileService(
    email: String!
    sub: ID
    id: ID
    name: String
    bio: String
    apiKeyUpdate: ApiKeyUpdate
    avatar: String
  ): Response
    @aws_api_key
    @aws_iam
    @aws_cognito_user_pools
    @function(name: "mewProfileService-${env}")

  updateMembershipService(
    workshopId: ID!
    action: String
    payloads: [MembershipServicePayload]
  ): Response
    @aws_api_key
    @aws_iam
    @aws_cognito_user_pools
    @function(name: "membershipService-${env}")

  runProcessAudioTask(
    assignmentId: ID!
    email: String!
    options: DownloadLinkOptions
  ): String @function(name: "runProcessAudioTask-${env}")

  populateMembers: [String] @function(name: "populateMembers-${env}")
}
