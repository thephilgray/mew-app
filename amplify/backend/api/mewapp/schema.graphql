type Credit {
    id: ID!
    title: String
    artists: [String]
    artistLinks: [String]
}

type Artwork {
    id: ID!
    credit: [Credit]
}

type FileRequest @model @auth(rules: [{ allow: groups, groups: ["Admin"] }, { allow: public, operations: [read] }]) {
    id: ID!
    expiration: AWSDateTime!
    title: String
    details: String
    required: Boolean
    playlistArtwork: Artwork
    submissions: [FileRequestSubmission] @hasMany(indexName: "submissionsByFileRequestId", fields: ["id"])
    workshop: Workshop @belongsTo(fields: ["workshopId"])
    workshopId: ID
        @index(name: "fileRequestsByWorkshopId", queryField: "fileRequestsByWorkshopId")
        @default(value: "c9443826-b0c3-4def-91d1-503ce4a27c7d")
}

type FileRequestSubmission
    @model
    @auth(rules: [{ allow: groups, groups: ["Admin"] }, { allow: public, operations: [create, read] }]) {
    id: ID!
    fileRequestId: ID! @index(name: "submissionsByFileRequestId", queryField: "submissionsByFileRequestId")
    fileRequest: FileRequest @belongsTo(fields: ["fileRequestId"])
    artist: String
    name: String
    email: String @index(name: "submissionsByEmail", queryField: "submissionsByEmail")
    fileId: String
    fileExtension: String
    rating: Int
    comments: String
    workshopId: ID
        @index(name: "submissionsByWorkshopId", queryField: "submissionsByWorkshopId")
        @default(value: "c9443826-b0c3-4def-91d1-503ce4a27c7d")
}

type Workshop
    @model
    @auth(rules: [{ allow: groups, groups: ["Admin", "Curators"] }, { allow: public, operations: [read] }]) {
    id: ID!
    name: String
    fileRequests: [FileRequest] @hasMany(indexName: "fileRequestsByWorkshopId", fields: ["id"])
    submissions: [FileRequestSubmission] @hasMany(indexName: "submissionsByWorkshopId", fields: ["id"])
    status: String
    passes: Int
}

type Member @model @auth(rules: [{ allow: groups, groups: ["Admin"] }, { allow: public, operations: [create] }]) {
    email: String! @primaryKey
    artist: String
    submissions: [FileRequestSubmission] @hasMany(indexName: "submissionsByEmail", fields: ["email"])
    status: String
}

input SongData {
    fileId: String
    title: String
}

input DownloadLinkOptions {
    stripMetadataForSoundCloud: Boolean
}

type Mutation {
    processDownload(assignmentId: ID!, songData: [SongData]): String @function(name: "zipmewsubmissions-${env}")
    runProcessAudioTask(assignmentId: ID!, email: String!, options: DownloadLinkOptions): String
        @function(name: "runProcessAudioTask-${env}")
    populateMembers: [String] @function(name: "populateMembers-${env}")
}
 